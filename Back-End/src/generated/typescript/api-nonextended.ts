/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/auth/register": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Register a new user */
		post: operations["userRegister"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/login": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** User login */
		post: operations["userLogin"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/logout": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** User logout */
		post: operations["userLogout"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/verifyEmail": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Verify user email */
		get: operations["userverifyEmail"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/resetPassword": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Reset user password */
		post: operations["userResetPassword"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/profile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get user profile */
		get: operations["getUserProfile"];
		/** Update user profile */
		put: operations["updateUserProfile"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/** Partially update user profile */
		patch: operations["patchUserProfile"];
		trace?: never;
	};
	"/users/search": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Search for users
		 * @description Search for users based on various criteria with standardized pagination.
		 */
		get: operations["searchUsers"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/discover": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Discover potential matches
		 * @description Get potential matches using the matching algorithm with standardized pagination.
		 *
		 *     **Algorithm Features:**
		 *     - Filters out already seen/liked/passed users
		 *     - Considers user preferences (age, location, orientation)
		 *     - Excludes blocked users and users who blocked you
		 *     - Uses fame rating and compatibility scoring
		 *     - Geographic distance-based scoring with PostGIS
		 *     - Common hashtag/interest matching
		 *
		 *     **Pagination Strategy:**
		 *     - Uses standardized page/limit pagination for consistent results
		 *     - Algorithm applies scoring and filtering on each request
		 *     - Provides full pagination metadata and navigation links
		 *
		 */
		get: operations["discoverUsers"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/photos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get user photos */
		get: operations["getUserPhotos"];
		put?: never;
		/** Upload a new photo */
		post: operations["uploadUserPhoto"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/photos/{photoId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get user photo by ID */
		get: operations["getUserPhotoById"];
		put?: never;
		post?: never;
		/**
		 * Delete user photo
		 * @description Delete a specific photo.
		 *
		 *     **Authorization:**
		 *     - Users can only delete their own photos
		 *     - Admins can delete any photo
		 *     - Returns 403 if user tries to delete another user's photo
		 *
		 */
		delete: operations["deleteUserPhoto"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/photos/{photoId}/main": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Set a photo as the main profile photo */
		post: operations["setMainPhoto"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get user by ID */
		get: operations["getUserById"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/{id}/like": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get likes for a specific user
		 * @description Retrieve likes for a specific user profile.
		 *
		 *     **Privacy Rules:**
		 *     - Only returns likes if the requested user ID matches the authenticated user
		 *     - Cannot view other users' likes for privacy reasons
		 *     - Use `/users/likes` endpoint instead for current user's likes
		 *
		 */
		get: operations["getUserLikes"];
		put?: never;
		/**
		 * Like a user
		 * @description Like a user profile. This action is mutual and will notify the other user.
		 *
		 */
		post: operations["likeUser"];
		/**
		 * Remove like/Dislike
		 * @description Remove a like/dislike from a user profile.
		 */
		delete: operations["removeUserLike"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/{id}/block": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get blocked users for a specific user
		 * @description Retrieve blocked users for a specific user profile.
		 *
		 *     **Privacy Rules:**
		 *     - Only returns blocks if the requested user ID matches the authenticated user
		 *     - Cannot view other users' block lists for privacy and safety reasons
		 *     - Use `/users/blocks` endpoint instead for current user's blocks
		 *
		 */
		get: operations["getBlockedUsers"];
		put?: never;
		/**
		 * Block selected user
		 * @description Block a user from interacting with the current user.
		 */
		post: operations["blockUser"];
		/**
		 * Unblock selected user
		 * @description Unblock a previously blocked user.
		 */
		delete: operations["unblockUser"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/matches": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get current user's matches
		 * @description Retrieve a list of matches for the current authenticated user.
		 *
		 *     **Privacy Rules:**
		 *     - Only returns matches for the authenticated user
		 *     - Cannot view other users' matches for privacy reasons
		 *
		 */
		get: operations["getCurrentUserMatches"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/likes": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get current user's likes
		 * @description Retrieve lists of users that the current user has liked and users who have liked the current user.
		 *
		 *     **Privacy Rules:**
		 *     - Users can only see their own likes (given and received)
		 *     - Returns separate lists for likes given and likes received
		 *     - Includes like timestamps and status
		 *
		 */
		get: operations["getCurrentUserLikes"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/users/blocks": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get current user's blocked users
		 * @description Retrieve the list of users that the current user has blocked.
		 *
		 *     **Privacy Rules:**
		 *     - Users can only see their own block list
		 *     - Does not reveal who has blocked the current user (for safety)
		 *     - Includes block timestamps
		 *
		 */
		get: operations["getCurrentUserBlocks"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/hashtags": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all hashtags */
		get: operations["getAllHashtags"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/hashtags/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Adds an hashtag to the user's hashtags */
		post: operations["addHashtagToUser"];
		/** removes */
		delete: operations["removeHashtagFromUser"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/chat/user": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all the chats of a user */
		get: operations["getUserChats"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/chat/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a specific chat room by ID */
		get: operations["getChatById"];
		put?: never;
		post?: never;
		/** Delete a specific chat room */
		delete: operations["deleteChatById"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/chat/{id}/messages": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all messages in a chat room */
		get: operations["getChatMessages"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		registerRequest: components["schemas"]["RegisterRequest"];
		registerResponse: components["schemas"]["RegisterResponse"];
		loginRequest: components["schemas"]["LoginRequest"];
		loginResponse: components["schemas"]["LoginResponse"];
		logoutResponse: components["schemas"]["LogoutResponse"];
		user: components["schemas"]["User"];
		userProfilePatchRequest: components["schemas"]["UserProfilePatchRequest"];
		SuccessfulLikeResponse: {
			/** @example User successfully liked/Disliked */
			message?: string;
			/**
			 * @description Indicates if the like resulted in a mutual match
			 * @example true
			 */
			isMatch?: boolean;
			/**
			 * Format: uuid
			 * @description The ID of the match, if applicable
			 * @example d1e5f1c2-3b4c-4f5d-8e6f-7g8h9i0j1k2l
			 */
			matchId?: string;
			/**
			 * @description The action taken, either "like" or "dislike"
			 * @example like
			 * @enum {string}
			 */
			action?: "like" | "dislike";
			/**
			 * Format: uuid
			 * @description The ID of the user who was liked/disliked
			 * @example 3631423c-fc47-4ba9-bffc-448bed706aec
			 */
			targetUserId?: string;
		};
		photo: components["schemas"]["Photo"];
		photoUploadRequest: components["schemas"]["PhotoUploadRequest"];
		photoResponse: components["schemas"]["PhotoResponse"];
		photoListResponse: components["schemas"]["PhotoListResponse"];
		paginationQuery: components["schemas"]["PaginationQuery"];
		paginationMeta: components["schemas"]["PaginationMeta"];
		paginationLinks: components["schemas"]["PaginationLinks"];
		paginatedResponse: components["schemas"]["PaginatedResponse"];
		chatMessage: components["schemas"]["ChatMessage"];
		chatRoom: components["schemas"]["ChatRoom"];
		chatMessagesPaginatedResponse: components["schemas"]["ChatMessagesPaginatedResponse"];
		hashtag: components["schemas"]["Hashtag"];
		RegisterRequest: {
			/** @example lollo */
			username: string;
			/**
			 * Format: email
			 * @example lollo@example.com
			 */
			email: string;
			/**
			 * Format: password
			 * @example securepassword123
			 */
			password: string;
			/** @example Lollo */
			first_name: string;
			/** @example Smith */
			last_name: string;
			/**
			 * Format: date
			 * @example 1998-01-01
			 */
			birth_date: string;
			/** @example Hello, I'm Lollo! I love hiking and outdoor adventures. */
			bio?: string;
			/** @example {
			 *       "lat": 40.7128,
			 *       "lng": -74.006
			 *     } */
			location: {
				/**
				 * Format: float
				 * @example 40.7128
				 */
				lat?: number;
				/**
				 * Format: float
				 * @example -74.006
				 */
				lng?: number;
			};
			/** @example false */
			location_manual?: boolean;
			/** @enum {string} */
			sexual_orientation: "heterosexual" | "homosexual" | "bisexual";
			/** @enum {string} */
			gender: "male" | "female" | "other";
		};
		RegisterResponse: {
			/** @example User registered successfully */
			message?: string;
			/** @example 1234567890abcdef */
			user_id?: string;
		};
		ErrorResponse: {
			/**
			 * @description Error type
			 * @example Bad Request
			 */
			error: string;
			/**
			 * @description Human-readable error message
			 * @example The request could not be processed
			 */
			message: string;
			/**
			 * @description Application-specific error code
			 * @example VALIDATION_ERROR
			 */
			code?: string;
			/**
			 * @description Additional error details
			 * @example {
			 *       "field": "email",
			 *       "issue": "Invalid email format"
			 *     }
			 */
			details?: {
				[key: string]: unknown;
			};
		};
		LoginRequest: {
			/**
			 * Format: email
			 * @example lollo@example.com
			 */
			email_or_username: string;
			/**
			 * Format: password
			 * @example securepassword123
			 */
			password: string;
		};
		LoginResponse: {
			/** @example Login successful */
			message: string;
			/** @example eyJhbGciOi */
			token: string;
			/** @example 1234567890abcdef */
			user_id: string;
		};
		LogoutResponse: {
			/** @example User logged out successfully */
			message?: string;
		};
		verifyEmailResponse: {
			/** @example Email verified successfully */
			message?: string;
		};
		ResetPasswordRequest: {
			/**
			 * Format: email
			 * @example lollo@example.com
			 */
			email?: string;
		};
		ResetPasswordResponse: {
			/** @example Email sent with password reset instructions */
			message?: string;
		};
		Photo: {
			/**
			 * Format: uuid
			 * @example 550e8400-e29b-41d4-a716-446655440000
			 */
			id: string;
			/**
			 * Format: uuid
			 * @example 550e8400-e29b-41d4-a716-446655440001
			 */
			user_id: string;
			/**
			 * @description Generated filename for storage
			 * @example photo_1.jpg
			 */
			filename: string;
			/**
			 * @description Original filename uploaded by user
			 * @example my_selfie.jpg
			 */
			original_filename?: string;
			/**
			 * Format: uri
			 * @description Public URL to access the image
			 * @example /uploads/photos/550e8400-e29b-41d4-a716-446655440000.jpg
			 */
			image_url: string;
			/**
			 * @description File size in bytes
			 * @example 2048576
			 */
			file_size?: number;
			/**
			 * @example image/jpeg
			 * @enum {string}
			 */
			mime_type: "image/jpeg" | "image/png" | "image/gif" | "image/webp";
			/**
			 * @description Whether this is the user's main profile photo
			 * @example false
			 */
			is_main: boolean;
			/**
			 * @description Order in which photos should be displayed
			 * @example 1
			 */
			display_order: number;
			/**
			 * Format: date-time
			 * @description When the photo was uploaded
			 * @example 2024-01-15T10:30:00Z
			 */
			uploaded_at: string;
		};
		User: {
			/** Format: uuid */
			id?: string;
			/** Format: email */
			email?: string;
			name?: string;
			/** Format: date */
			birth_date?: string;
			bio?: string;
			first_name?: string;
			last_name?: string;
			/** @enum {string} */
			gender?: "male" | "female" | "other";
			/** @enum {string} */
			sexual_orientation?: "heterosexual" | "homosexual" | "bisexual" | "other";
			location?: {
				/** Format: float */
				latitude?: number;
				/** Format: float */
				longitude?: number;
			};
			fame_rating?: number;
			online_status?: boolean;
			likes_received?: number;
			views?: number;
			matches?: number;
			photos?: components["schemas"]["Photo"][];
			hashtags?: string[];
		};
		UserProfilePatchRequest: {
			username?: string;
			bio?: string;
			first_name?: string;
			last_name?: string;
			/** Format: date */
			birth_date?: string;
			/** Format: email */
			email?: string;
			/**
			 * @default bisexual
			 * @enum {string}
			 */
			sexual_orientation: "heterosexual" | "homosexual" | "bisexual";
			/**
			 * @default other
			 * @enum {string}
			 */
			gender: "male" | "female" | "other";
			location?: {
				/** Format: float */
				latitude?: number;
				/** Format: float */
				longitude?: number;
			};
		};
		PaginationMeta: {
			/**
			 * @description Total number of items
			 * @example 150
			 */
			total_items: number;
			/**
			 * @description Total number of pages
			 * @example 15
			 */
			total_pages: number;
			/**
			 * @description Current page number
			 * @example 3
			 */
			current_page: number;
			/**
			 * @description Items per page
			 * @example 10
			 */
			per_page: number;
			/**
			 * @description Whether there's a previous page
			 * @example true
			 */
			has_previous: boolean;
			/**
			 * @description Whether there's a next page
			 * @example true
			 */
			has_next: boolean;
		};
		PaginationLinks: {
			/**
			 * Format: uri
			 * @description URL to first page
			 * @example /api/users?page=1&limit=10
			 */
			first: string;
			/**
			 * Format: uri
			 * @description URL to last page
			 * @example /api/users?page=15&limit=10
			 */
			last: string;
			/**
			 * Format: uri
			 * @description URL to previous page (null if first page)
			 * @example /api/users?page=2&limit=10
			 */
			previous?: string;
			/**
			 * Format: uri
			 * @description URL to next page (null if last page)
			 * @example /api/users?page=4&limit=10
			 */
			next?: string;
			/**
			 * Format: uri
			 * @description URL to current page
			 * @example /api/users?page=3&limit=10
			 */
			self: string;
		};
		PaginatedResponse: {
			/** @description Array of items for current page */
			data: Record<string, never>[];
			meta: components["schemas"]["PaginationMeta"];
			links: components["schemas"]["PaginationLinks"];
		};
		PhotoListResponse: {
			/** @description User's photos ordered by display_order */
			photos: components["schemas"]["Photo"][];
			/**
			 * @description Total number of photos for this user
			 * @example 3
			 */
			total: number;
		};
		PhotoUploadRequest: {
			/**
			 * Format: binary
			 * @description Photo file (JPEG, PNG, WebP, GIF max 5MB)
			 */
			photo: string;
			/**
			 * @description Set as main profile photo
			 * @default false
			 */
			is_main: boolean;
			/**
			 * @description Display order (0 = first)
			 * @default 0
			 */
			display_order: number;
		};
		PhotoResponse: {
			/** @example Photo uploaded successfully */
			message: string;
			photo: components["schemas"]["Photo"];
		};
		SuccessResponse: {
			/** @example Operation completed successfully */
			message?: string;
			/** @example {
			 *       "userId": "123e4567-e89b-12d3-a456-426614174000"
			 *     } */
			data?: {
				[key: string]: unknown;
			};
		};
		smallUser: {
			/** Format: uuid */
			id: string;
			first_name: string;
			last_name: string;
			online_status: boolean;
			main_photo: components["schemas"]["Photo"];
		};
		ChatRoom: {
			/** Format: uuid */
			id: string;
			small_user1: components["schemas"]["smallUser"];
			small_user2: components["schemas"]["smallUser"];
			/** Format: date-time */
			created_at: string;
		};
		PaginationQuery: {
			/**
			 * @description Page number (1-based)
			 * @default 1
			 * @example 1
			 */
			page: number;
			/**
			 * @description Number of items per page
			 * @default 10
			 * @example 10
			 */
			limit: number;
			/**
			 * @description Field to sort by
			 * @example created_at
			 */
			sort?: string;
			/**
			 * @description Sort direction
			 * @default desc
			 * @example desc
			 * @enum {string}
			 */
			order: "asc" | "desc";
		};
		ChatMessage: {
			/** Format: uuid */
			id: string;
			/** Format: uuid */
			chat_room_id: string;
			/** Format: uuid */
			sender_id: string;
			/** @enum {string} */
			message_type: "text" | "image" | "video" | "audio";
			/** @description Text content or caption for media messages */
			content?: string;
			/** @description Original filename for media messages */
			media_filename?: string;
			/** @description Storage path for media files */
			media_file_path?: string;
			/** @description File size in bytes */
			media_file_size?: number;
			/** @description MIME type for media files */
			media_mime_type?: string;
			/** @description Duration in seconds for audio/video */
			media_duration?: number;
			/** @description Thumbnail path for videos */
			thumbnail_path?: string;
			/** Format: date-time */
			read_at?: string;
			/** Format: date-time */
			created_at: string;
		};
		ChatMessagesPaginatedResponse: {
			data: components["schemas"]["ChatMessage"][];
			meta: components["schemas"]["PaginationMeta"];
			links: components["schemas"]["PaginationLinks"];
		};
		Hashtag: {
			id: number;
			/**
			 * @description The name of the hashtag
			 * @example #example
			 */
			name: string;
			/** Format: date-time */
			created_at?: string;
		};
	};
	responses: never;
	parameters: {
		pageParam: string;
		limitParam: string;
		sortParam: string;
		orderParam: string;
		/**
		 * @description Page number (1-based)
		 * @example 1
		 */
		PageParam: number;
		/**
		 * @description Number of items per page
		 * @example 10
		 */
		LimitParam: number;
		/**
		 * @description Field to sort by
		 * @example created_at
		 */
		SortParam: string;
		/**
		 * @description Sort direction
		 * @example desc
		 */
		OrderParam: "asc" | "desc";
	};
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	userRegister: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RegisterRequest"];
			};
		};
		responses: {
			/** @description User registered successfully */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterResponse"];
				};
			};
			/** @description Bad request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	userLogin: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["LoginRequest"];
			};
		};
		responses: {
			/** @description User logged in successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["LoginResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	userLogout: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User logged out successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["LogoutResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	userverifyEmail: {
		parameters: {
			query: {
				token: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Email verified successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["verifyEmailResponse"];
				};
			};
			/** @description Unauthorized */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	userResetPassword: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ResetPasswordRequest"];
			};
		};
		responses: {
			/** @description Password reset successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResetPasswordResponse"];
				};
			};
			/** @description Bad request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	getUserProfile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User profile retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	updateUserProfile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["User"];
			};
		};
		responses: {
			/** @description User profile updated successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	patchUserProfile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UserProfilePatchRequest"];
			};
		};
		responses: {
			/** @description User profile partially updated successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	searchUsers: {
		parameters: {
			query?: {
				/**
				 * @description Page number (1-based)
				 * @example 1
				 */
				page?: components["parameters"]["PageParam"];
				/**
				 * @description Number of items per page
				 * @example 10
				 */
				limit?: components["parameters"]["LimitParam"];
				/**
				 * @description Field to sort by
				 * @example created_at
				 */
				sort?: components["parameters"]["SortParam"];
				/**
				 * @description Sort direction
				 * @example desc
				 */
				order?: components["parameters"]["OrderParam"];
				/** @description Search query string (e.g., name, interests) */
				query?: string;
				/** @description Minimum age filter */
				age_min?: number;
				/** @description Maximum age filter */
				age_max?: number;
				/** @description Filter by gender */
				gender?: "male" | "female" | "other";
				/** @description Location filter (lat,lng format) */
				location?: string;
				/** @description Maximum distance from location in kilometers */
				max_distance?: number;
				/** @description Comma-separated list of hashtags/interests to filter by */
				interests?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List of users matching the search criteria retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "id": "550e8400-e29b-41d4-a716-446655440000",
					 *           "first_name": "John",
					 *           "last_name": "Doe",
					 *           "birth_date": "1995-05-15",
					 *           "gender": "male",
					 *           "fame_rating": 4,
					 *           "online_status": true
					 *         }
					 *       ],
					 *       "meta": {
					 *         "total_items": 42,
					 *         "total_pages": 5,
					 *         "current_page": 1,
					 *         "per_page": 10,
					 *         "has_previous": false,
					 *         "has_next": true
					 *       },
					 *       "links": {
					 *         "first": "https://127.0.0.1/api/users/search?page=1&limit=10",
					 *         "last": "https://127.0.0.1/api/users/search?page=5&limit=10",
					 *         "next": "https://127.0.0.1/api/users/search?page=2&limit=10",
					 *         "self": "https://127.0.0.1/api/users/search?page=1&limit=10"
					 *       }
					 *     } */
					"application/json": components["schemas"]["PaginatedResponse"] & {
						/** @description Array of users matching search criteria */
						data?: components["schemas"]["User"][];
					};
				};
			};
			/** @description Bad request - invalid query parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Bad Request",
					 *       "message": "Invalid query parameters",
					 *       "code": "BAD_REQUEST"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	discoverUsers: {
		parameters: {
			query?: {
				/**
				 * @description Page number (1-based)
				 * @example 1
				 */
				page?: components["parameters"]["PageParam"];
				/**
				 * @description Number of items per page
				 * @example 10
				 */
				limit?: components["parameters"]["LimitParam"];
				/** @description Maximum distance in kilometers */
				maxDistance?: number;
				/** @description Minimum age filter */
				ageMin?: number;
				/** @description Maximum age filter */
				ageMax?: number;
				/** @description Minimum fame rating filter */
				minFameRating?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Potential matches retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "data": [
					 *         {
					 *           "id": "550e8400-e29b-41d4-a716-446655440000",
					 *           "first_name": "Alice",
					 *           "last_name": "Johnson",
					 *           "birth_date": "1995-03-15",
					 *           "gender": "female",
					 *           "fame_rating": 4,
					 *           "online_status": true
					 *         }
					 *       ],
					 *       "meta": {
					 *         "total_items": 142,
					 *         "total_pages": 8,
					 *         "current_page": 1,
					 *         "per_page": 20,
					 *         "has_previous": false,
					 *         "has_next": true
					 *       },
					 *       "links": {
					 *         "first": "https://127.0.0.1/api/users/discover?page=1&limit=20",
					 *         "last": "https://127.0.0.1/api/users/discover?page=8&limit=20",
					 *         "next": "https://127.0.0.1/api/users/discover?page=2&limit=20",
					 *         "self": "https://127.0.0.1/api/users/discover?page=1&limit=20"
					 *       },
					 *       "filters": {
					 *         "maxDistance": 50,
					 *         "ageRange": {
					 *           "min": 18,
					 *           "max": 100
					 *         },
					 *         "minFameRating": 0
					 *       }
					 *     } */
					"application/json": components["schemas"]["PaginatedResponse"] & {
						/** @description Array of discoverable users */
						data?: components["schemas"]["User"][];
						/** @description Applied filters for the request */
						filters?: {
							/** @example 50 */
							maxDistance?: number;
							ageRange?: {
								/** @example 18 */
								min?: number;
								/** @example 100 */
								max?: number;
							};
							/**
							 * Format: float
							 * @example 0
							 */
							minFameRating?: number;
						};
					};
				};
			};
			/** @description No more users to discover */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @example No more potential matches available */
						message?: string;
						/** @example [
						 *       "Try expanding your distance preferences",
						 *       "Consider adjusting your age range",
						 *       "Add more interests to your profile"
						 *     ] */
						suggestions?: string[];
					};
				};
			};
			/** @description Bad request - invalid parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	getUserPhotos: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User photos retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PhotoListResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	uploadUserPhoto: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"multipart/form-data": components["schemas"]["PhotoUploadRequest"];
			};
		};
		responses: {
			/** @description Photo uploaded successfully */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PhotoResponse"];
				};
			};
			/** @description Bad request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	getUserPhotoById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the photo to retrieve */
				photoId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User photo retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PhotoResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Photo not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	deleteUserPhoto: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the photo to delete */
				photoId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Photo deleted successfully */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Forbidden - insufficient permissions */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Forbidden",
					 *       "message": "You can only delete your own photos",
					 *       "code": "INSUFFICIENT_PERMISSIONS"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Photo not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	setMainPhoto: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the photo to set as main */
				photoId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Main photo set successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Forbidden - insufficient permissions */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Forbidden",
					 *       "message": "You can only set your own photos as main",
					 *       "code": "INSUFFICIENT_PERMISSIONS"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Photo not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	getUserById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the user to retrieve */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	getUserLikes: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the user to retrieve likes for (must be current user) */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List of liked users retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized",
					 *       "message": "You must be logged in to like a user",
					 *       "code": "UNAUTHORIZED"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Forbidden - can only view your own likes */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Forbidden",
					 *       "message": "You can only view your own likes. Use /users/likes instead.",
					 *       "code": "PRIVACY_VIOLATION"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Not Found",
					 *       "message": "User not found",
					 *       "code": "USER_NOT_FOUND"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	likeUser: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the user to like */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/** @description Whether to like or dislike the user */
					like: boolean;
				};
			};
		};
		responses: {
			/** @description User liked successfully */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "message": "User liked successfully"
					 *     } */
					"application/json": components["schemas"]["SuccessfulLikeResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized",
					 *       "message": "You must be logged in to like a user",
					 *       "code": "UNAUTHORIZED"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	removeUserLike: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the user to remove like/dislike for */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/** @description Whether to like or dislike the user */
					like: boolean;
				};
			};
		};
		responses: {
			/** @description Like/Dislike removed successfully */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized",
					 *       "message": "You must be logged in to remove a like/dislike",
					 *       "code": "UNAUTHORIZED"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Not Found",
					 *       "message": "User not found",
					 *       "code": "USER_NOT_FOUND"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	getBlockedUsers: {
		parameters: {
			query?: {
				/** @description Maximum number of results to return */
				limit?: number;
				/** @description Page number for pagination */
				page?: number;
			};
			header?: never;
			path: {
				/** @description The ID of the user to retrieve blocked users for (must be current user) */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List of blocked users retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized",
					 *       "message": "You must be logged in to block a user",
					 *       "code": "UNAUTHORIZED"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Forbidden - can only view your own block list */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Forbidden",
					 *       "message": "You can only view your own block list. Use /users/blocks instead.",
					 *       "code": "PRIVACY_VIOLATION"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Not Found",
					 *       "message": "User not found",
					 *       "code": "USER_NOT_FOUND"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	blockUser: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the user to block */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User blocked successfully */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized",
					 *       "message": "You must be logged in to block a user",
					 *       "code": "UNAUTHORIZED"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Not Found",
					 *       "message": "User not found",
					 *       "code": "USER_NOT_FOUND"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	unblockUser: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the user to unblock */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User unblocked successfully */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized",
					 *       "message": "You must be logged in to unblock a user",
					 *       "code": "UNAUTHORIZED"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Not Found",
					 *       "message": "User not found",
					 *       "code": "USER_NOT_FOUND"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	getCurrentUserMatches: {
		parameters: {
			query?: {
				/** @description Page number for pagination */
				page?: number;
				/** @description Number of results per page */
				limit?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List of user matches retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @description Total number of matches */
						total?: number;
						/** @description Current page number */
						page?: number;
						/** @description Total number of pages */
						totalPages?: number;
						matches?: {
							user: components["schemas"]["User"];
							/**
							 * Format: date-time
							 * @description When the match was created
							 */
							matchedAt: string;
							/**
							 * Format: date-time
							 * @description When the last message was sent (if any)
							 */
							lastMessageAt?: string;
							/** @description Number of unread messages from this match */
							unreadMessages: number;
						}[];
					};
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized",
					 *       "message": "You must be logged in to view matches",
					 *       "code": "UNAUTHORIZED"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	getCurrentUserLikes: {
		parameters: {
			query?: {
				/** @description Filter by like type */
				type?: "given" | "received" | "mutual";
				/** @description Page number for pagination */
				page?: number;
				/** @description Number of results per page */
				limit?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User likes retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * @description Type of likes returned
						 * @enum {string}
						 */
						type?: "given" | "received" | "mutual";
						/** @description Total number of likes of this type */
						total?: number;
						/** @description Current page number */
						page?: number;
						/** @description Total number of pages */
						totalPages?: number;
						likes?: {
							user: components["schemas"]["User"];
							/**
							 * Format: date-time
							 * @description When the like was created
							 */
							likedAt: string;
							/** @description Whether this like resulted in a mutual match */
							isMatch: boolean;
						}[];
					};
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized",
					 *       "message": "You must be logged in to view likes",
					 *       "code": "UNAUTHORIZED"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	getCurrentUserBlocks: {
		parameters: {
			query?: {
				/** @description Page number for pagination */
				page?: number;
				/** @description Number of results per page */
				limit?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Blocked users retrieved successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @description Total number of blocked users */
						total?: number;
						/** @description Current page number */
						page?: number;
						/** @description Total number of pages */
						totalPages?: number;
						blockedUsers?: {
							user: components["schemas"]["User"];
							/**
							 * Format: date-time
							 * @description When the user was blocked
							 */
							blockedAt: string;
							/**
							 * @description Optional reason for blocking (if provided)
							 * @example Inappropriate behavior
							 */
							reason?: string;
						}[];
					};
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized",
					 *       "message": "You must be logged in to view blocked users",
					 *       "code": "UNAUTHORIZED"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	getAllHashtags: {
		parameters: {
			query?: {
				/**
				 * @description Page number (1-based)
				 * @example 1
				 */
				page?: components["parameters"]["PageParam"];
				/**
				 * @description Number of items per page
				 * @example 10
				 */
				limit?: components["parameters"]["LimitParam"];
				/**
				 * @description Field to sort by
				 * @example created_at
				 */
				sort?: components["parameters"]["SortParam"];
				/**
				 * @description Sort direction
				 * @example desc
				 */
				order?: components["parameters"]["OrderParam"];
				/** @description Search query for filtering hashtags */
				query?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A list of hashtags */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PaginatedResponse"][];
				};
			};
			/** @description No hashtags found */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @example No hashtags found */
						message?: string;
					};
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @example Unauthorized access */
						message?: string;
					};
				};
			};
		};
	};
	addHashtagToUser: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the hashtag to add */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Hashtag added successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SuccessResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @example Unauthorized access */
						message?: string;
					};
				};
			};
			/** @description Hashtag not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @example Hashtag not found */
						message?: string;
					};
				};
			};
		};
	};
	removeHashtagFromUser: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the hashtag to remove */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Hashtag removed successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "message": "Hashtag removed successfully"
					 *     } */
					"application/json": components["schemas"]["SuccessResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @example Unauthorized access */
						message?: string;
					};
				};
			};
			/** @description Hashtag not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/** @example Hashtag not found */
						message?: string;
					};
				};
			};
		};
	};
	getUserChats: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A list of chat rooms for the user */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ChatRoom"][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized access",
					 *       "message": "You must be logged in to access this resource"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "User not found",
					 *       "message": "The specified user does not exist"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	getChatById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the chat room */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The requested chat room */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ChatRoom"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized access",
					 *       "message": "You must be logged in to access this resource"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Chat room not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Chat room not found",
					 *       "message": "The specified chat room does not exist",
					 *       "code": "NOT_FOUND"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
	deleteChatById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The ID of the chat room */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Chat room deleted successfully */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "message": "Chat room deleted successfully"
					 *     } */
					"application/json": components["schemas"]["SuccessResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Chat room not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	getChatMessages: {
		parameters: {
			query?: {
				/**
				 * @description Page number (1-based)
				 * @example 1
				 */
				page?: components["parameters"]["PageParam"];
				/**
				 * @description Number of items per page
				 * @example 10
				 */
				limit?: components["parameters"]["LimitParam"];
				/**
				 * @description Field to sort by
				 * @example created_at
				 */
				sort?: components["parameters"]["SortParam"];
				/**
				 * @description Sort direction
				 * @example desc
				 */
				order?: components["parameters"]["OrderParam"];
			};
			header?: never;
			path: {
				/** @description The ID of the chat room */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A list of messages in the chat room */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PaginatedResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Unauthorized access",
					 *       "message": "You must be logged in to access this resource",
					 *       "code": "UNAUTHORIZED"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
			/** @description Chat room not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					/** @example {
					 *       "error": "Chat room not found",
					 *       "message": "The specified chat room does not exist",
					 *       "code": "NOT_FOUND"
					 *     } */
					"application/json": components["schemas"]["ErrorResponse"];
				};
			};
		};
	};
}
