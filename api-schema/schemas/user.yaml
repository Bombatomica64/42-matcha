openapi: 3.1.1
info:
  title: User schema
  version: 1.0.0
  description: API schema for user management

paths:
  profile:
    get:
      summary: Get user profile
      tags:
        - User
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
    put:
      summary: Update user profile
      tags:
        - User
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
    patch:
      summary: Partially update user profile
      tags:
        - User
      operationId: patchUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfilePatchRequest'
      responses:
        '200':
          description: User profile partially updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
  userById:
    get:
      summary: Get user by ID
      tags:
        - User
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to retrieve
          schema:
            type: string
            format: uuid
            description: The unique identifier of the user
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
  userPhotos:
    get:
      summary: Get user photos
      tags:
        - User
        - Photos
      operationId: getUserPhotos
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User photos retrieved successfully
          content:
            application/json:
              schema:
                $ref: './photos.yaml#/components/schemas/PhotoListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
    post:
      summary: Upload a new photo
      tags:
        - User
        - Photos
      operationId: uploadUserPhoto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: './photos.yaml#/components/schemas/PhotoUploadRequest'
      responses:
        '201':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: './photos.yaml#/components/schemas/PhotoResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
  userPhotoById:
    get:
      summary: Get user photo by ID
      tags:
        - User
        - Photos
      operationId: getUserPhotoById
      security:
        - bearerAuth: []
      parameters:
      - name: photoId
        in: path
        required: true
        description: The ID of the photo to retrieve
        schema:
            type: string
            format: uuid
            description: The unique identifier of the photo
      responses:
        '200':
          description: User photo retrieved successfully
          content:
            application/json:
              schema:
                $ref: './photos.yaml#/components/schemas/PhotoResponse'
        '404':
          description: Photo not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
    delete:
      summary: Delete user photo
      description: |
        Delete a specific photo.

        **Authorization:**
        - Users can only delete their own photos
        - Admins can delete any photo
        - Returns 403 if user tries to delete another user's photo

      tags:
        - User
        - Photos
      operationId: deleteUserPhoto
      security:
        - bearerAuth: []
      parameters:
        - name: photoId
          in: path
          required: true
          description: The ID of the photo to delete
          schema:
            type: string
            format: uuid
            description: The unique identifier of the photo
      responses:
        '204':
          description: Photo deleted successfully
        '403':
           description: Forbidden - insufficient permissions
           content:
             application/json:
               schema:
                 $ref: './common.yaml#/components/schemas/ErrorResponse'
               example:
                 error: "Forbidden"
                 message: "You can only delete your own photos"
                 code: "INSUFFICIENT_PERMISSIONS"
        '404':
          description: Photo not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
  setMainPhoto:
    post:
      summary: Set a photo as the main profile photo
      tags:
        - User
        - Photos
      operationId: setMainPhoto
      security:
        - bearerAuth: []
      parameters:
        - name: photoId
          in: path
          required: true
          description: The ID of the photo to set as main
          schema:
            type: string
            format: uuid
            description: The unique identifier of the photo
      responses:
        '200':
          description: Main photo set successfully
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Forbidden"
                message: "You can only set your own photos as main"
                code: "INSUFFICIENT_PERMISSIONS"
        '404':
          description: Photo not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
  likeUser:
    post:
      summary: Like a user
      description: |
        Like a user profile. This action is mutual and will notify the other user.
      tags:
        - User
        - Match
      operationId: likeUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to like
          schema:
            type: string
            format: uuid
            description: The unique identifier of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                like:
                  type: boolean
                  description: Whether to like or dislike the user
              required:
                - like
      responses:
        '201':
          description: User liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulLikeResponse'
              example:
                message: "User liked successfully"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
                example:
                  error: "Not Found"
                  message: "User not found"
                  code: "USER_NOT_FOUND"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Unauthorized"
                message: "You must be logged in to like a user"
                code: "UNAUTHORIZED"
    get:
      summary: Get likes for a specific user
      description: |
        Retrieve likes for a specific user profile.

        **Privacy Rules:**
        - Only returns likes if the requested user ID matches the authenticated user
        - Cannot view other users' likes for privacy reasons
        - Use `/users/likes` endpoint instead for current user's likes
      tags:
        - User
        - Match
      operationId: getUserLikes
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to retrieve likes for (must be current user)
          schema:
            type: string
            format: uuid
            description: The unique identifier of the user
      responses:
        '200':
          description: List of liked users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - can only view your own likes
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Forbidden"
                message: "You can only view your own likes. Use /users/likes instead."
                code: "PRIVACY_VIOLATION"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Not Found"
                message: "User not found"
                code: "USER_NOT_FOUND"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Unauthorized"
                message: "You must be logged in to like a user"
                code: "UNAUTHORIZED"
    delete:
      summary: Remove like/Dislike
      description: Remove a like/dislike from a user profile.
      tags:
        - User
        - Match
      operationId: removeUserLike
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to remove like/dislike for
          schema:
            type: string
            format: uuid
            description: The unique identifier of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                like:
                  type: boolean
                  description: Whether to like or dislike the user
              required:
                - like
      responses:
        '204':
          description: Like/Dislike removed successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Not Found"
                message: "User not found"
                code: "USER_NOT_FOUND"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Unauthorized"
                message: "You must be logged in to remove a like/dislike"
                code: "UNAUTHORIZED"
  blockUser:
    get:
      summary: Get blocked users for a specific user
      description: |
        Retrieve blocked users for a specific user profile.

        **Privacy Rules:**
        - Only returns blocks if the requested user ID matches the authenticated user
        - Cannot view other users' block lists for privacy and safety reasons
        - Use `/users/blocks` endpoint instead for current user's blocks
      tags:
        - User
        - Blocks
      operationId: getBlockedUsers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to retrieve blocked users for (must be current user)
          schema:
            type: string
            format: uuid
            description: The unique identifier of the user
        - name: limit
          in: query
          required: false
          description: Maximum number of results to return
          schema:
            type: integer
            format: int32
            example: 10
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200':
          description: List of blocked users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - can only view your own block list
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Forbidden"
                message: "You can only view your own block list. Use /users/blocks instead."
                code: "PRIVACY_VIOLATION"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Not Found"
                message: "User not found"
                code: "USER_NOT_FOUND"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Unauthorized"
                message: "You must be logged in to block a user"
                code: "UNAUTHORIZED"
    post:
      summary: Block selected user
      description: Block a user from interacting with the current user.
      tags:
        - User
      operationId: blockUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to block
          schema:
            type: string
            format: uuid
            description: The unique identifier of the user
      responses:
        '204':
          description: User blocked successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Not Found"
                message: "User not found"
                code: "USER_NOT_FOUND"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Unauthorized"
                message: "You must be logged in to block a user"
                code: "UNAUTHORIZED"
    delete:
      summary: Unblock selected user
      description: Unblock a previously blocked user.
      tags:
        - User
      operationId: unblockUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to unblock
          schema:
            type: string
            format: uuid
            description: The unique identifier of the user
      responses:
        '204':
          description: User unblocked successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Not Found"
                message: "User not found"
                code: "USER_NOT_FOUND"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Unauthorized"
                message: "You must be logged in to unblock a user"
                code: "UNAUTHORIZED"

  userMatches:
    get:
      summary: Get current user's matches
      description: |
        Retrieve a list of matches for the current authenticated user.

        **Privacy Rules:**
        - Only returns matches for the authenticated user
        - Cannot view other users' matches for privacy reasons
      tags:
        - User
        - Matches
      operationId: getCurrentUserMatches
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          required: false
          description: Number of results per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of user matches retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of matches
                  page:
                    type: integer
                    description: Current page number
                  totalPages:
                    type: integer
                    description: Total number of pages
                  matches:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          $ref: '#/components/schemas/User'
                        matchedAt:
                          type: string
                          format: date-time
                          description: When the match was created
                        lastMessageAt:
                          type: string
                          format: date-time
                          description: When the last message was sent (if any)
                        unreadMessages:
                          type: integer
                          description: Number of unread messages from this match
                          minimum: 0
                      required:
                        - user
                        - matchedAt
                        - unreadMessages
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Unauthorized"
                message: "You must be logged in to view matches"
                code: "UNAUTHORIZED"

  userLikes:
    get:
      summary: Get current user's likes
      description: |
        Retrieve lists of users that the current user has liked and users who have liked the current user.

        **Privacy Rules:**
        - Users can only see their own likes (given and received)
        - Returns separate lists for likes given and likes received
        - Includes like timestamps and status
      tags:
        - User
        - Likes
      operationId: getCurrentUserLikes
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          required: false
          description: Filter by like type
          schema:
            type: string
            enum: [given, received, mutual]
            default: received
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          required: false
          description: Number of results per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: User likes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: [given, received, mutual]
                    description: Type of likes returned
                  total:
                    type: integer
                    description: Total number of likes of this type
                  page:
                    type: integer
                    description: Current page number
                  totalPages:
                    type: integer
                    description: Total number of pages
                  likes:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          $ref: '#/components/schemas/User'
                        likedAt:
                          type: string
                          format: date-time
                          description: When the like was created
                        isMatch:
                          type: boolean
                          description: Whether this like resulted in a mutual match
                      required:
                        - user
                        - likedAt
                        - isMatch
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Unauthorized"
                message: "You must be logged in to view likes"
                code: "UNAUTHORIZED"

  userBlocks:
    get:
      summary: Get current user's blocked users
      description: |
        Retrieve the list of users that the current user has blocked.

        **Privacy Rules:**
        - Users can only see their own block list
        - Does not reveal who has blocked the current user (for safety)
        - Includes block timestamps
      tags:
        - User
        - Blocks
      operationId: getCurrentUserBlocks
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          required: false
          description: Number of results per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Blocked users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of blocked users
                  page:
                    type: integer
                    description: Current page number
                  totalPages:
                    type: integer
                    description: Total number of pages
                  blockedUsers:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          $ref: '#/components/schemas/User'
                        blockedAt:
                          type: string
                          format: date-time
                          description: When the user was blocked
                        reason:
                          type: string
                          description: Optional reason for blocking (if provided)
                          example: "Inappropriate behavior"
                      required:
                        - user
                        - blockedAt
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Unauthorized"
                message: "You must be logged in to view blocked users"
                code: "UNAUTHORIZED"
  search:
    get:
      summary: Search for users
      description: Search for users based on various criteria with standardized pagination.
      tags:
        - User
      operationId: searchUsers
      security:
        - bearerAuth: []
      parameters:
        - $ref: './pagination.yaml#/components/parameters/PageParam'
        - $ref: './pagination.yaml#/components/parameters/LimitParam'
        - $ref: './pagination.yaml#/components/parameters/SortParam'
        - $ref: './pagination.yaml#/components/parameters/OrderParam'
        - name: query
          in: query
          required: false
          description: Search query string (e.g., name, interests)
          schema:
            type: string
            example: "john"
        - name: age_min
          in: query
          required: false
          description: Minimum age filter
          schema:
            type: integer
            minimum: 18
            maximum: 100
            example: 21
        - name: age_max
          in: query
          required: false
          description: Maximum age filter
          schema:
            type: integer
            minimum: 18
            maximum: 100
            example: 35
        - name: gender
          in: query
          required: false
          description: Filter by gender
          schema:
            type: string
            enum: [male, female, other]
            example: "female"
        - name: location
          in: query
          required: false
          description: Location filter (lat,lng format)
          schema:
            type: string
            pattern: '^-?\d+\.?\d*,-?\d+\.?\d*$'
            example: "40.7128,-74.0060"
        - name: max_distance
          in: query
          required: false
          description: Maximum distance from location in kilometers
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
            example: 25
        - name: interests
          in: query
          required: false
          description: Comma-separated list of hashtags/interests to filter by
          schema:
            type: string
            example: "hiking,photography,music"
      responses:
        '200':
          description: List of users matching the search criteria retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './pagination.yaml#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                        description: Array of users matching search criteria
              example:
                data:
                  - id: "550e8400-e29b-41d4-a716-446655440000"
                    first_name: "John"
                    last_name: "Doe"
                    birth_date: "1995-05-15"
                    gender: "male"
                    fame_rating: 4
                    online_status: true
                meta:
                  total_items: 42
                  total_pages: 5
                  current_page: 1
                  per_page: 10
                  has_previous: false
                  has_next: true
                links:
                  first: "https://127.0.0.1/api/users/search?page=1&limit=10"
                  last: "https://127.0.0.1/api/users/search?page=5&limit=10"
                  next: "https://127.0.0.1/api/users/search?page=2&limit=10"
                  self: "https://127.0.0.1/api/users/search?page=1&limit=10"
        '400':
          description: Bad request - invalid query parameters
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
              example:
                error: "Bad Request"
                message: "Invalid query parameters"
                code: "BAD_REQUEST"
  discover:
    get:
      summary: Discover potential matches
      description: |
        Get potential matches using the matching algorithm with standardized pagination.

        **Algorithm Features:**
        - Filters out already seen/liked/passed users
        - Considers user preferences (age, location, orientation)
        - Excludes blocked users and users who blocked you
        - Uses fame rating and compatibility scoring
        - Geographic distance-based scoring with PostGIS
        - Common hashtag/interest matching

        **Pagination Strategy:**
        - Uses standardized page/limit pagination for consistent results
        - Algorithm applies scoring and filtering on each request
        - Provides full pagination metadata and navigation links
      tags:
        - User
        - Discovery
      operationId: discoverUsers
      security:
        - bearerAuth: []
      parameters:
        - $ref: './pagination.yaml#/components/parameters/PageParam'
        - $ref: './pagination.yaml#/components/parameters/LimitParam'
        - name: maxDistance
          in: query
          description: Maximum distance in kilometers
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
            example: 25
        - name: ageMin
          in: query
          description: Minimum age filter
          schema:
            type: integer
            minimum: 18
            maximum: 100
            default: 18
            example: 21
        - name: ageMax
          in: query
          description: Maximum age filter
          schema:
            type: integer
            minimum: 18
            maximum: 100
            default: 100
            example: 35
        - name: minFameRating
          in: query
          description: Minimum fame rating filter
          schema:
            type: number
            format: float
            minimum: 0
            maximum: 5
            default: 0
            example: 2.5
      responses:
        '200':
          description: Potential matches retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './pagination.yaml#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                        description: Array of discoverable users
                      filters:
                        type: object
                        description: Applied filters for the request
                        properties:
                          maxDistance:
                            type: integer
                            example: 50
                          ageRange:
                            type: object
                            properties:
                              min:
                                type: integer
                                example: 18
                              max:
                                type: integer
                                example: 100
                          minFameRating:
                            type: number
                            format: float
                            example: 0
              example:
                data:
                  - id: "550e8400-e29b-41d4-a716-446655440000"
                    first_name: "Alice"
                    last_name: "Johnson"
                    birth_date: "1995-03-15"
                    gender: "female"
                    fame_rating: 4
                    online_status: true
                meta:
                  total_items: 142
                  total_pages: 8
                  current_page: 1
                  per_page: 20
                  has_previous: false
                  has_next: true
                links:
                  first: "https://127.0.0.1/api/users/discover?page=1&limit=20"
                  last: "https://127.0.0.1/api/users/discover?page=8&limit=20"
                  next: "https://127.0.0.1/api/users/discover?page=2&limit=20"
                  self: "https://127.0.0.1/api/users/discover?page=1&limit=20"
                filters:
                  maxDistance: 50
                  ageRange:
                    min: 18
                    max: 100
                  minFameRating: 0
        '204':
          description: No more users to discover
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No more potential matches available"
                  suggestions:
                    type: array
                    items:
                      type: string
                    example:
                      - "Try expanding your distance preferences"
                      - "Consider adjusting your age range"
                      - "Add more interests to your profile"
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        birth_date:
          type: string
          format: date
        bio:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        gender:
          type: string
          enum: [male, female, other]
        sexual_orientation:
          type: string
          enum: [heterosexual, homosexual, bisexual, other]
        location:
          type: object
          properties:
            latitude:
              type: number
              format: float
            longitude:
              type: number
              format: float
        fame_rating:
          type: integer
          minimum: 0.5
          maximum: 5.0
        online_status:
          type: boolean
        likes_received:
          type: integer
          minimum: 0
        views:
          type: integer
          minimum: 0
        matches:
          type: integer
          minimum: 0
        photos:
          type: array
          items:
            $ref: './photos.yaml#/components/schemas/Photo'
        hashtags:
          type: array
          items:
            type: string
    UserProfilePatchRequest:
      type: object
      properties:
        username:
          type: string
        bio:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        birth_date:
          type: string
          format: date
        email:
          type: string
          format: email
        sexual_orientation:
          type: string
          enum: [heterosexual, homosexual, bisexual]
          default: bisexual
        gender:
          type: string
          enum: [male, female, other]
          default: other
        location:
          type: object
          properties:
            latitude:
              type: number
              format: float
            longitude:
              type: number
              format: float
    SuccessfulLikeResponse:
      type: object
      properties:
        message:
          type: string
          example: "User successfully liked/Disliked"
        isMatch:
          type: boolean
          description: Indicates if the like resulted in a mutual match
          example: true
        matchId:
          type: string
          format: uuid
          description: The ID of the match, if applicable
          example: "d1e5f1c2-3b4c-4f5d-8e6f-7g8h9i0j1k2l"
        action:
          type: string
          enum: [like, dislike]
          description: The action taken, either "like" or "dislike"
          example: "like"
        targetUserId:
          type: string
          format: uuid
          description: The ID of the user who was liked/disliked
          example: "3631423c-fc47-4ba9-bffc-448bed706aec"
    smallUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        online_status:
          type: boolean
        main_photo:
          $ref: './photos.yaml#/components/schemas/Photo'
      required:
        - id
        - first_name
        - last_name
        - online_status
        - main_photo