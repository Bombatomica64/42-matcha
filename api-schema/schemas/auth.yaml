openapi: 3.1.1
info:
  title: Auth schema
  version: 1.0.0
  description: API schema for user authentication

paths:
  register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      security: []
      operationId: userRegister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/ErrorResponse'
  login:
    post:
      summary: User login
      operationId: userLogin
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/ErrorResponse'
  logout:
    post:
      summary: User logout
      operationId: userLogout
      tags:
        - Authentication
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/ErrorResponse'
  verifyEmail:
    get:
      summary: Verify user email
      operationId: userverifyEmail
      tags:
        - Authentication
      security:
        - bearerAuth: []
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifyEmailResponse'
        '400':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/ErrorResponse'
  resetPassword:
    post:
      summary: Reset user password
      operationId: userResetPassword
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/ErrorResponse'


components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          example: lollo
        email:
          type: string
          format: email
          example: lollo@example.com
        password:
          type: string
          format: password
          example: securepassword123
        first_name:
          type: string
          example: Lollo
        last_name:
          type: string
          example: Smith
        birth_date:
          type: string
          format: date
          example: 1998-01-01
        bio:
          type: string
          example: "Hello, I'm Lollo! I love hiking and outdoor adventures."
        location:
          type: object
          properties:
            lat:
              type: number
              format: float
              example: 40.7128
            lng:
              type: number
              format: float
              example: -74.0060
          example: { "lat": 40.7128, "lng": -74.0060 }
        location_manual:
          type: boolean
          example: false
        sexual_orientation:
          type: string
          enum: [ "heterosexual", "homosexual", "bisexual" ]
        gender:
          type: string
          enum: [ "male", "female", "other" ]
      required:
        - username
        - email
        - password
        - birth_date
        - gender
        - sexual_orientation
        - first_name
        - last_name

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: "User registered successfully"
        user_id:
          type: string
          example: "1234567890abcdef"

    LoginRequest:
      type: object
      properties:
        email_or_username:
          type: string
          format: email
          example: lollo@example.com
        password:
          type: string
          format: password
          example: securepassword123
      required:
        - email_or_username
        - password

    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: "Login successful"
        token:
          type: string
          example: "eyJhbGciOi"
        user_id:
          type: string
          example: "1234567890abcdef"

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: "User logged out successfully"

    verifyEmailResponse:
      type: object
      properties:
        message:
          type: string
          example: "Email verified successfully"

    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: lollo@example.com

    ResetPasswordResponse:
      type: object
      properties:
        message:
          type: string
          example: "Email sent with password reset instructions"
