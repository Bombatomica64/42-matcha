/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: operations["userRegister"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User login */
        post: operations["userLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User logout */
        post: operations["userLogout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verifyEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Verify user email */
        get: operations["userverifyEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/resetPassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset user password */
        post: operations["userResetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        registerRequest: components["schemas"]["RegisterRequest"];
        registerResponse: components["schemas"]["RegisterResponse"];
        loginRequest: components["schemas"]["LoginRequest"];
        loginResponse: components["schemas"]["LoginResponse"];
        logoutResponse: components["schemas"]["LogoutResponse"];
        errorResponse: components["schemas"]["ErrorResponse"];
        RegisterRequest: {
            /** @example lollo */
            username: string;
            /**
             * Format: email
             * @example lollo@example.com
             */
            email: string;
            /**
             * Format: password
             * @example securepassword123
             */
            password: string;
            /** @example Lollo */
            first_name: string;
            /** @example Smith */
            last_name: string;
            /**
             * Format: date
             * @example 1998-01-01
             */
            birth_date: string;
            /** @example Hello, I'm Lollo! I love hiking and outdoor adventures. */
            bio?: string;
            /** @example {
             *       "lat": 40.7128,
             *       "lng": -74.006
             *     } */
            location?: {
                /**
                 * Format: float
                 * @example 40.7128
                 */
                lat?: number;
                /**
                 * Format: float
                 * @example -74.006
                 */
                lng?: number;
            };
            /** @example false */
            location_manual?: boolean;
            /** @enum {string} */
            sexual_orientation: "heterosexual" | "homosexual" | "bisexual";
            /** @enum {string} */
            gender: "male" | "female" | "other";
        };
        RegisterResponse: {
            /** @example User registered successfully */
            message?: string;
            /** @example 1234567890abcdef */
            user_id?: string;
        };
        ErrorResponse: {
            /** @example Invalid credentials */
            message?: string;
        };
        LoginRequest: {
            /**
             * Format: email
             * @example lollo@example.com
             */
            email_or_username: string;
            /**
             * Format: password
             * @example securepassword123
             */
            password: string;
        };
        LoginResponse: {
            /** @example Login successful */
            message?: string;
            /** @example eyJhbGciOi */
            token?: string;
            /** @example 1234567890abcdef */
            user_id?: string;
        };
        LogoutResponse: {
            /** @example User logged out successfully */
            message?: string;
        };
        verifyEmailResponse: {
            /** @example Email verified successfully */
            message?: string;
        };
        ResetPasswordRequest: {
            /**
             * Format: email
             * @example lollo@example.com
             */
            email?: string;
        };
        ResetPasswordResponse: {
            /** @example Email sent with password reset instructions */
            message?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    userRegister: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description User registered successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    userLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description User logged in successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    userLogout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User logged out successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    userverifyEmail: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Email verified successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["verifyEmailResponse"];
                };
            };
            /** @description Unauthorized */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    userResetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequest"];
            };
        };
        responses: {
            /** @description Password reset successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResetPasswordResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
