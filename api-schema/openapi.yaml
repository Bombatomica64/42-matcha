openapi: 3.1.1
info:
  title: Matcha Dating App API
  version: 1.0.0
  description: API for the Matcha dating application
  license:
    name: MIT License
    url: https://opensource.org/license/mit/

servers:
  - url: https://127.0.0.1/api
    description: Development server

paths:
  # Authentication endpoints
  /auth/register:
    $ref: './schemas/auth.yaml#/paths/register'
  /auth/login:
    $ref: './schemas/auth.yaml#/paths/login'
  /auth/logout:
    $ref: './schemas/auth.yaml#/paths/logout'
  /auth/verifyEmail:
    $ref: './schemas/auth.yaml#/paths/verifyEmail'
  /auth/resetPassword:
    $ref: './schemas/auth.yaml#/paths/resetPassword'


  # User profile endpoints
  /users/profile:
    $ref: './schemas/user.yaml#/paths/profile'
  

  # User discovery/search
  /users/search:
    $ref: './schemas/user.yaml#/paths/search'
  /users/discover:
    $ref: './schemas/user.yaml#/paths/discover'

  # Photo management under users
  /photos:
    $ref: './schemas/user.yaml#/paths/userPhotos'
  /photos/{photoId}:
    $ref: './schemas/user.yaml#/paths/userPhotoById'
  /photos/{photoId}/main:
    $ref: './schemas/user.yaml#/paths/setMainPhoto'

  
  # User interactions
  /users/{id}:
    $ref: './schemas/user.yaml#/paths/userById'
  /users/{id}/like:
    $ref: './schemas/user.yaml#/paths/likeUser'
  /users/{id}/block:
    $ref: './schemas/user.yaml#/paths/blockUser'
  /users/matches:
    $ref: './schemas/user.yaml#/paths/userMatches'
  
  # User relationship lists (private to user)
  /users/likes:
    $ref: './schemas/user.yaml#/paths/userLikes'
  /users/blocks:
    $ref: './schemas/user.yaml#/paths/userBlocks'

  # Hashtags endpoints
  /hashtags:
    $ref: './schemas/hashtags.yaml#/paths/hashtags'

components:
  schemas:
    # Reference schemas from other files
    # registerRequest:
    #   $ref: './schemas/auth.yaml#/components/schemas/RegisterRequest'
    # registerResponse:
    #   $ref: './schemas/auth.yaml#/components/schemas/RegisterResponse'
    # loginRequest:
    #   $ref: './schemas/auth.yaml#/components/schemas/LoginRequest'
    # loginResponse:
    #   $ref: './schemas/auth.yaml#/components/schemas/LoginResponse'
    # logoutResponse:
    #   $ref: './schemas/auth.yaml#/components/schemas/LogoutResponse'
    # User:
    #   $ref: './schemas/user.yaml#/components/schemas/User'
   
    # Match:
    #   $ref: './schemas/match.yaml#/components/schemas/Match'
    # ErrorResponse:
    #   type: object
    #   properties:
    #     error:
    #       type: string
    #       example: "Invalid request"
    #     message:
    #       type: string
    #       example: "The provided data is invalid"
    #     code:
    #       type: string
    #       example: "VALIDATION_ERROR"
    #     details:
    #       type: object
    #       additionalProperties: true
    #       example: 
    #         field: "email"
    #         reason: "Invalid email format"
    #   required:
    #     - error
    #     - message
    # SuccessResponse:
    #   type: object
    #   properties:
    #     message:
    #       type: string
    #       example: "User liked successfully"
    #     data:
    #       type: object
    #       additionalProperties: true
    #       example:
    #         userId: "123e4567-e89b-12d3-a456-426614174000"

    # Reference auth schemas
    registerRequest:
      $ref: './schemas/auth.yaml#/components/schemas/RegisterRequest'
    registerResponse:
      $ref: './schemas/auth.yaml#/components/schemas/RegisterResponse'
    loginRequest:
      $ref: './schemas/auth.yaml#/components/schemas/LoginRequest'
    loginResponse:
      $ref: './schemas/auth.yaml#/components/schemas/LoginResponse'
    logoutResponse:
      $ref: './schemas/auth.yaml#/components/schemas/LogoutResponse'

    # Reference user schemas
    user:
      $ref: './schemas/user.yaml#/components/schemas/User'
    userProfilePatchRequest:
      $ref: './schemas/user.yaml#/components/schemas/UserProfilePatchRequest'
    # Reference photo schemas
    photo:
      $ref: './schemas/photos.yaml#/components/schemas/Photo'
    photoUploadRequest:
      $ref: './schemas/photos.yaml#/components/schemas/PhotoUploadRequest'
    photoResponse:
      $ref: './schemas/photos.yaml#/components/schemas/PhotoResponse'
    photoListResponse:
      $ref: './schemas/photos.yaml#/components/schemas/PhotoListResponse'

    # Pagination schemas
    paginationQuery:
      $ref: './schemas/pagination.yaml#/components/schemas/PaginationQuery'
    paginationMeta:
      $ref: './schemas/pagination.yaml#/components/schemas/PaginationMeta'
    paginationLinks:
      $ref: './schemas/pagination.yaml#/components/schemas/PaginationLinks'
    paginatedResponse:
      $ref: './schemas/pagination.yaml#/components/schemas/PaginatedResponse'

  parameters:
    # Pagination parameters
    pageParam:
      $ref: './schemas/pagination.yaml#/components/parameters/PageParam'
    limitParam:
      $ref: './schemas/pagination.yaml#/components/parameters/LimitParam'
    sortParam:
      $ref: './schemas/pagination.yaml#/components/parameters/SortParam'
    orderParam:
      $ref: './schemas/pagination.yaml#/components/parameters/OrderParam'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token containing user ID and role information.
        
        **Authorization Rules:**
        - **Admin**: Can perform any operation on any resource
        - **User**: Can only access/modify their own resources
        - **Guest**: Read-only access to public resources