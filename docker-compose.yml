services:
  backend:
    build:
      context: ./Back-End
      dockerfile: Dockerfile
    env_file:
      - ./Back-End/.env
    volumes:
      - uploads:/app/uploads
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.middlewares=api-stripprefix
      - traefik.http.services.backend.loadbalancer.server.port=3000
      - traefik.http.routers.backend.priority=2
      - traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api
    depends_on:
      - db
    networks:
      - traefik

  # frontend:
  #   build:
  #     context: ./Front-End
  #     dockerfile: Dockerfile
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.frontend.rule=Host(`localhost`) && PathPrefix(`/`)
  #     - traefik.http.routers.frontend.entrypoints=web
  #     - traefik.http.routers.frontend.priority=1
  #     - traefik.http.services.frontend.loadbalancer.server.port=80
  #   networks:
  #     - traefik

  traefik:
    build:
      context: ./Traefik
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "8080:8080"  # Traefik dashboard
      - "8443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik

  db:
    build:
      context: ./Db
      dockerfile: Dockerfile
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - traefik
    env_file:
      - ./Db/.env

networks:
  traefik:
    driver: bridge

volumes:
  db_data:
    driver: local
  uploads:
    driver: local